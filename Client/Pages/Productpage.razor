@*@page "/ProductPage"*@
@page "/ProductPage/{id:int}"
@inject ProductServices svc

<div class="modal fade lug" id="myModal" role="dialog">
    <div class="modal-dialog">
        Modal content
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Change</h4>
            </div>
            <div class="modal-body">
                <ul>
                    <li><a href="#"><img src="images/flag-up-1.png" alt="" /> United States</a></li>
                    <li><a href="#"><img src="images/flag-up-2.png" alt="" /> France </a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div id="sidebar" class="top-nav">
    <ul id="sidebar-nav" class="sidebar-nav">
        <li><a href="#">Help</a></li>
        <li><a href="#">How it works</a></li>
        <li><a href="#">Chamb for Business</a></li>
    </ul>
</div>
<div class="product-page-main">
    <div class="container">
        
        <div>
            <ProductInfo image="@p.ImageAddress" productName="@p.Name" Price="@p.Price" Ratings="123"></ProductInfo>
        </div>
        </div>
    </div>
       
@*SHOW PRODUCTS*@

<div class="text-center" style="margin-top: 50px">
    <h1>Recent Products</h1>
</div>
<div class="panel-body w-75">
    <div class="tab-content">
        <div class="tab-pane fade in active" id="tab1default">
            <div class="product-box-main row w-50">
                    <ProductsForUser Category="@p.Category" image="@p.ImageAddress" ProductName="@p.Name" Price="@p.Price" Ratings="123"></ProductsForUser>
                
            </div>
        </div>
        </div>
    </div>

        @code{
            [Parameter]
            public int id { get; set; }
            Product p = new Product();
            protected async override Task OnInitializedAsync()
            {

                p = await svc.GetProductDetail(id);
                Console.WriteLine(p);
                await base.OnInitializedAsync();
            }
        }
